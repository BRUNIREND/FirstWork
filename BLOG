import sqlite3
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('data_base_name')
parser.add_argument('--ingredients')
parser.add_argument('--meals')
args = parser.parse_args()
path = r'C:\Users\Семья\PycharmProjects\Food Blog Backend\Food Blog Backend\task'
database_name = args.data_base_name
# if database_name in os.listdir(path):
#     os.remove(database_name)

db = sqlite3.connect(f'{database_name}')
example = db.cursor()


def create_table(table_name, column1, column2):
    example.execute(
        f""" CREATE TABLE IF NOT EXISTS {table_name} (
    {column1[0]} {column1[1]} {column1[2]},
    {column2[0]} {column2[1]} {column2[2]}
    )
    """)
    db.commit()


def insert_into_table(table_name, column_name, thing):
    example.execute(f"""
    INSERT INTO {table_name} ({column_name}) VALUES ('{thing}')
    """)

    db.commit()


def create_table_if():
    create_table('meals', ('meal_id', 'INTEGER', 'PRIMARY KEY'),
                 ('meal_name', "VARCHAR(1000000000)", "UNIQUE NOT NULL"))
    create_table('ingredients', ('ingredient_id', 'INTEGER', 'PRIMARY KEY'),
                 ('ingredient_name', "VARCHAR(100000000)", "UNIQUE NOT NULL"))
    create_table('measures', ('measure_id', 'INTEGER', 'PRIMARY KEY'),
                 ('measure_name', "VARCHAR(100000000000000)", "UNIQUE"))
    sample_data = (('meals', 'meal_name'), ('ingredients', 'ingredient_name'), ('measures', 'measure_name'))
    example.execute(f"""
        CREATE TABLE IF NOT EXISTS recipes (
        recipe_id INTEGER PRIMARY KEY,
        recipe_name VARCHAR(1000) not null,
        recipe_description VARCHAR(1000) 
        )
        """)
    for i in sample_data:
        for j in range(len(data[i[0]])):
            insert_into_table(i[0], i[1], data[i[0]][j])
    example.execute('PRAGMA foreign_keys = ON;')
    example.execute(f"""
        CREATE TABLE IF NOT EXISTS serve(
        serve_id INTEGER PRIMARY KEY,
        recipe_id INTEGER NOT NULL,
        meal_id INTEGER NOT NULL,
        FOREIGN KEY(meal_id) 
        REFERENCES meals(meal_id),
        FOREIGN KEY(recipe_id)
        REFERENCES recipes(recipe_id)
        );
        """)
    example.execute(f"""
    CREATE TABLE IF NOT EXISTS quantity(
    quantity_id INTEGER PRIMARY KEY,
    measure_id INTEGER NOT NULL,
    ingredient_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    recipe_id INTEGER NOT NULL,
    FOREIGN KEY(measure_id)
    REFERENCES measures(measure_id),
    FOREIGN KEY(ingredient_id)
    REFERENCES ingredients(ingredient_id),
    FOREIGN KEY(recipe_id)
    REFERENCES recipes(recipe_id)
    )
    """)
    db.commit()


def create_recipes(recipe_name, recipe_description=''):
    result = example.execute(
        f"""
        insert into recipes (recipe_name, recipe_description) VALUES ("{recipe_name}", "{recipe_description}")
        """
    ).lastrowid
    db.commit()
    return result


def create_serve(meal_id, recipe_id):
    example.execute(f"""
        INSERT INTO serve(recipe_id, meal_id) VALUES ({recipe_id},{meal_id});
    """)
    db.commit()


def insert_into_q(quantity, recipe_id, measure_id, ingredient_id):
    example.execute(f"""
    INSERT INTO quantity(quantity, recipe_id, measure_id, ingredient_id ) 
    VALUES({quantity}, {recipe_id},{measure_id},{ingredient_id} )
    """)
    db.commit()


def ingred_meals(ingredients):
    q1 = f"""
            SELECT recipe_id FROM recipes
         """
    example.execute(q1)
    recipes_ids = set(example.fetchall())
    # print(recipes_ids)
    recipes_ids_arr = []
    for recipes_id in recipes_ids:
        q2 = f"""
                SELECT ingredient_id FROM quantity
                WHERE recipe_id = {recipes_id[0]}
             """
        example.execute(q2)
        ingredients_ids = example.fetchall()
        # print(ingredients_ids)
        arr_ingreds = [data['ingredients'][i[0] - 1] for i in ingredients_ids]
        # print(ingredients)
        for ingred in ingredients:
            # print(ingred)
            if ingred not in arr_ingreds:
                # print(ingred)
                break
        else:
            recipes_ids_arr.append(recipes_id)
        # print(recipes_ids_arr)

    return recipes_ids_arr

def meals_in_recipe(list_of_recipes, meals):
    final_recipes_arr_id = []
    for recipe_id_new_list in list_of_recipes:
        query_for_serve = f"""
                                SELECT meal_id FROM serve
                                WHERE recipe_id = {recipe_id_new_list[0]}
                              """
        example.execute(query_for_serve)
        meals_ids = example.fetchall()
        meals_ids = [data['meals'][i[0] - 1] for i in meals_ids]
        for meal in meals:
            if meal in meals_ids:
                final_recipes_arr_id.append(recipe_id_new_list)
                break
    return final_recipes_arr_id
def string_or_list(mabe_list):
    # print(mabe_list)
    if len(mabe_list) == 0:
        return 'There are no such recipes in the database'
    else:
        return mabe_list
data = {"meals": ("breakfast", "brunch", "lunch", "supper"),
        "ingredients": ("milk", "cacao", "strawberry", "blueberry", "blackberry", "sugar"),
        "measures": ("ml", "g", "l", "cup", "tbsp", "tsp", "dsp", "")}
query_for_database = f"""
                     select * from sqlite_master
                        where type = 'table'
                     """
example.execute(query_for_database)
if example.fetchone() is None:
    create_table_if()

if args.ingredients is None and args.meals is None:
    print('Pass the empty recipe name to exit.\n')
    while True:
        recipe = input('Recipe name: ')
        if len(recipe) == 0:
            break
        else:
            descr = input('Recipe description: ')
            recipe_id = create_recipes(recipe, descr)
            for i in range(1, 5):
                print(f'{i}) ' + (data['meals'][i - 1]), end=' ')
            user_input = input('\nEnter proposed meals separated by a space: ').split(' ')
            for meal in user_input:
                create_serve(meal, recipe_id)
            while True:
                """quantity measure ingredient"""
                """quantity recipe_id measure_id ingredient_id"""
                user_input = input('Input quantity of ingredient <press enter to stop>:')
                if user_input == '':
                    break
                else:
                    str_ingredients = user_input.split(' ')
                    count_measures = ' '.join(data['measures']).count(str_ingredients[1]) if len(str_ingredients) == 3 else 0
                    ingred_count = ' '.join(data['ingredients']).count(
                        str_ingredients[2] if len(str_ingredients) == 3 else str_ingredients[1])
                    ingredient = [i for i in data['ingredients'] if
                                 i.split('berry')[0] in (str_ingredients[2] if len(str_ingredients) == 3 else str_ingredients[1])]
                    # print(ingredient)
                    if count_measures > 1:
                        print('The measure is not conclusive!')
                    elif len(str_ingredients) == 2:
                        if ingred_count > 1:
                            print('The ingredient is not conclusive!')
                        else:
                            insert_into_q(str_ingredients[0], recipe_id, data['measures'].index('') + 1,
                                          data['ingredients'].index(ingredient[0]) + 1)

                    elif ingred_count > 1:
                        print('The ingredient is not conclusive!')
                    else:
                        insert_into_q(str_ingredients[0], recipe_id, data['measures'].index(str_ingredients[1]) + 1,
                                      data['ingredients'].index(ingredient[0]) + 1)
else:
    # query = f"""
    #         SELECT recipe_id, ingredient_id FROM quantity
    #         INNER JOIN ingredients ON ingredients.ingredient_id = quantity.ingredient_id
    #         """
    # example.execute(query)
    # print(example.fetchall())

    # example.execute(f"""
    #                     SELECT ingredient_id FROM quantity
    #                 """)
    # print(example.fetchall())
    lists_of_recipes = ingred_meals(args.ingredients.split(','))
    lists_of_recipes = string_or_list(lists_of_recipes)
    # print(args.ingredients.split(','))

    # print(type(lists_of_recipes))
    if type(lists_of_recipes) != list:
        print(lists_of_recipes)

    else:
        final = meals_in_recipe(lists_of_recipes, args.meals.split(','))
        final = string_or_list(final)
        # print(type(final))

        if type(final) != list:
            print(final)
        else:
            names = []
            for id_recipe in final:
                q_final = f"""
                                      SELECT recipe_name FROM recipes
                                      WHERE recipe_id = {id_recipe[0]}
                                      """
                example.execute(q_final)
                names.append(example.fetchone())


            print("Recipes selected for you:" + ','.join([i[0] for i in names]))




db.close()

